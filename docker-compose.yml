services:
  app:
    build:
      context: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - ./src/main/resources/application.yml:/app/application.yml
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - petsi-net
    entrypoint: ["java", "-jar", "/app.jar", "--spring.config.location=file:/app/application.yml"]

  mysql:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - petsi-net
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: petsi-redis
    command: [ "redis-server",
               "--bind", "0.0.0.0",
               "--protected-mode", "no" ]   # 개발용·사내망이라면 off
    ports:
      - "6379:6379"
    networks:
      - petsi-net
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql-data:

networks:
  petsi-net: